//- код студента корректно работает при разных значениях n (в заготовке нет ввода n)
нет ввода но забито значение константы, так можно заодно проверить на хадкор изменив значение N
если там хардкор то при увиличении числа N, будут неправильные результаты

//студент не заменил создание массива и цикл на захардкоженный вывод
//- массив заполняется корректно, то есть значения не вычисляются на лету при выводе
в чем отличие? первое проверяет что массив создается?


//изначально тест и имплементация была бы проще если бы код был бы более узкопрофильным
//например он бы проверял, один конкретный навык, например заполнение данных в массиве

//еще надо незабыть при компляции сделать обработку вывода

//for (int i = 1; i <= n; i++) {  --- авторское решение неправильное, там <= , а должно быть <



'''
- студент не заменил создание массива и цикл на захардкоженный вывод (provisioning step)
- код студента корректно работает при разных значениях n (в заготовке нет ввода n) (runtime)
- используется цикл for (provisioning step)
//it can be better? calc hash?
- массив заполняется корректно, то есть значения не вычисляются на лету при выводе (runtime, double output)
'''

refactor to the following three phase

provisioning
testing
finalizing

fully disable console logging for prod

handle warnings

translate errors in the code